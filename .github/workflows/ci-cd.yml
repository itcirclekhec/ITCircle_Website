name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend Testing and Building
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run type checking
      run: npm run type-check || npx tsc --noEmit

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/.next/
        retention-days: 7

  # Backend Testing
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: itcircle_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify PostgreSQL connection
      run: |
        pg_isready -h localhost -p 5432 -U postgres
      env:
        PGPASSWORD: postgres

    - name: Run Django migrations
      run: python manage.py migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/itcircle_test
        SECRET_KEY: test-secret-key-for-ci

    - name: Run Django tests
      run: python manage.py test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/itcircle_test
        SECRET_KEY: test-secret-key-for-ci

    - name: Run Django system checks
      run: python manage.py check --deploy

    - name: Collect static files
      run: python manage.py collectstatic --noinput
      env:
        SECRET_KEY: test-secret-key-for-ci

  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit safety

    - name: Run Black (Python formatter)
      run: black --check --diff backend/

    - name: Run Flake8 (Python linter)
      run: flake8 backend/ --max-line-length=88

    - name: Run MyPy (Python type checker)
      run: mypy backend/ --ignore-missing-imports

    - name: Run Bandit (Security linter)
      run: bandit -r backend/ -f json -o bandit-report.json || true

    - name: Run Safety (Dependency vulnerability check)
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Dependency Vulnerability Check
  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install npm audit
      run: npm install -g npm-audit-html

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level high --json > npm-audit-report.json || true

    - name: Install safety for Python
      run: pip install safety

    - name: Run safety check
      run: |
        cd backend
        safety check --json --output safety-report.json || true

    - name: Upload vulnerability reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-reports
        path: |
          frontend/npm-audit-report.json
          backend/safety-report.json
        retention-days: 30

  # Build Success Notification
  success-notification:
    runs-on: ubuntu-latest
    needs: [frontend, backend, code-quality]
    if: success()

    steps:
    - name: Build Success
      run: echo "All checks passed! üéâ"

  # Failure Notification
  failure-notification:
    runs-on: ubuntu-latest
    needs: [frontend, backend, code-quality]
    if: failure()

    steps:
    - name: Build Failure
      run: |
        echo "Build failed! Please check the logs above for details. üîç"
        echo "Common issues:"
        echo "- Linting errors in frontend/backend code"
        echo "- Test failures"
        echo "- Type checking errors"
        echo "- Dependency vulnerabilities"
        exit 1
